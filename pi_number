#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include <pthread.h>

int npoints=10000000;
int count;
pthread_mutex_t lock;
int pointsThread;

void* monte_carlo(void * a)
{
    pthread_mutex_lock(&lock);
    float x=0;
    float y=0;
    srand(time(NULL));
    for(long int i=0;i<pointsThread;i++)
    {
        x = rand()/(float)RAND_MAX;
        y = rand()/(float)RAND_MAX;

        double r = sqrt(pow(x,2)+pow(y,2));

        if(r<=1)
        {
            count+=1;
        }
    }
    pthread_mutex_unlock(&lock);
    return NULL;
}

int main(int argc, char *argv[])
{
    clock_t start;
    clock_t end;
    double duration;

    start = clock();

    int NUM_THREADS=(int)(*argv[1]);

    if (pthread_mutex_init(&lock, NULL) != 0){
        printf("\n mutex init failed\n");
        return 1;
    }

    pthread_t threads[NUM_THREADS];
    pointsThread= npoints/NUM_THREADS;

    int i1;
    for(i1=0; i1<NUM_THREADS; i1++){
        pthread_create(&threads[i1], NULL, monte_carlo, NULL);
    }

    int i2;
    for(i2=0; i2<NUM_THREADS; i2++){
        pthread_join(threads[i2], NULL);
    }

    double PI = 4.0*(double)count/(double)npoints;
    end = clock();
    duration = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("PI = %f\nTime used=%f",PI, duration);
    pthread_mutex_destroy(&lock);
}
